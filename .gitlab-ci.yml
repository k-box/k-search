stages:
  - php-cs
  - test
  - release
  - deploy

cache:
  key: "$CI_BUILD_REF_NAME"
  paths:
    - vendor/
    - bin/

.need_composer: &need_composer
  before_script:
    - php -v
    - composer install --prefer-dist --no-interaction


.standard_build_and_execution: &standard_build_and_execution
# build and execute a docker image, use variables
# INSTANCE_PREFIX => the prefix of the docker container/image to be used
# BUILD_LOCATION => the folder where the base tar.gz file is located
# DOCKER_LOCATION => the folder where to run the docker-compose commands
  when: manual
  stage: deploy
  tags:
    - shell
  script:
    - cp ${BUILD_LOCATION}/klink-core-${CI_BUILD_REF_NAME/\//--}.tar.xz ${DOCKER_LOCATION}/kcore/downloads/kcore.tar.xz
    - cd ${DOCKER_LOCATION}
    - docker-compose -f klink-services.yml -p ${INSTANCE_PREFIX} build kcore
    - docker-compose -f docker-compose-kbox.yml -p ${INSTANCE_PREFIX} stop && docker-compose -f docker-compose-kbox.yml -p ${INSTANCE_PREFIX} rm -v -f && docker-compose -f docker-compose-kbox.yml -p ${INSTANCE_PREFIX} up -d frontend


##### Jobs

php-coding-styles:5.6:
  image: docker.klink.asia:5043/klink/php-ci-docker:5.6-alpine
  <<: *need_composer
  stage: php-cs
  script:
    - bin/php-cs-fixer fix --dry-run
  tags:
    - docker

test-no-solr:5.6:
  image: docker.klink.asia:5043/klink/php-ci-docker:5.6-alpine
  <<: *need_composer
  stage: test
  script:
    - app/console -q
    - if [ ! -f "bin/phpunit" ] ; then curl --location --output bin/phpunit https://phar.phpunit.de/phpunit-5.7.phar && chmod +x bin/phpunit; fi;
    - bin/phpunit -c app/ --exclude-group=solr,java,thumbnails
  tags:
    - docker
  variables:
    DOCKER_FIX_CACHE: "change-me"

build-tarball:
  stage: release
  script:
    - cp app/config/parameters.example.yml app/config/parameters.yml
    - php -v
    - composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader
    - rm -f composer.json
    - rm -f composer.lock
    - rm -f app/logs/*.log
    - rm -fr app/cache/dev
    - rm -fr ./vendor/jakoch/phantomjs
    - rm -f .gitignore
    - rm -f phpunit.xml
    - rm -f .gitattributes
    - rm -fr tests
    - rm -fr Tests
    - rm -f app/config/parameters.yml
    - rm -f app/config/parameters.example.yml
    - echo "$CI_BUILD_REF_NAME -- $CI_BUILD_REF" > web/version
    - tar --transform 's,^.,kcore,' -cJ . --exclude=.git > /var/www/temp/builds/klink-core-${CI_BUILD_REF_NAME/\//--}.tar.xz
  tags:
    - shell 


test_klink_asia_deploy:
# creates the KCore docker image and restart the test instance with the new image
  environment: Review
  <<: *standard_build_and_execution
  except:
    - master
  variables:
    INSTANCE_PREFIX: $TEST_INSTANCE_PREFIX
    BUILD_LOCATION: $BUILD_FOLDER
    DOCKER_LOCATION: $TEST_DOCKER_FOLDER


dms_klink_asia_deploy:
# creates the KCore docker image and restart the DMS.klink.asia instance with the new image
  stage: deploy
  environment: Staging
  script:
    - cp ${BUILD_FOLDER}/klink-core-$CI_BUILD_REF_NAME.tar.xz ${PROD_DOCKER_FOLDER}/kcore/downloads/kcore.tar.xz
    - cd ${PROD_DOCKER_FOLDER}
    - docker-compose -f klink-services.yml build kcore 
    - docker-compose -f ${PROD_DOCKER_FOLDER}/docker-compose-kbox.yml stop && docker-compose -f ${PROD_DOCKER_FOLDER}/docker-compose-kbox.yml rm -v -f && docker-compose -f ${PROD_DOCKER_FOLDER}/docker-compose-kbox.yml up -d frontend
  when: manual
  only:
    - master
  tags:
    - shell

