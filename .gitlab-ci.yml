stages:
  - php-cs
  - test
  - release
  - release-upload
  - deploy

cache:
  key: "$CI_PROJECT_ID"
  paths:
    - vendor/
    - bin/

.need_composer: &need_composer
  before_script:
    - php -v && composer --version
    - composer install --prefer-dist --no-interaction

.standard_build_and_execution: &standard_build_and_execution
# build and execute a docker image, use variables
# INSTANCE_PREFIX => the prefix of the docker container/image to be used
# BUILD_LOCATION => the folder where the base tar.gz file is located
# DOCKER_LOCATION => the folder where to run the docker-compose commands
  when: manual
  stage: deploy
  tags:
    - shell
  script:
    - cp ${BUILD_LOCATION}/klink-core-${CI_BUILD_REF_NAME/\//--}.tar.xz ${DOCKER_LOCATION}/kcore/downloads/kcore.tar.xz
    - cd ${DOCKER_LOCATION}
    - docker-compose -f klink-services.yml -p ${INSTANCE_PREFIX} build kcore
    - docker-compose -f docker-compose-kbox.yml -p ${INSTANCE_PREFIX} stop && docker-compose -f docker-compose-kbox.yml -p ${INSTANCE_PREFIX} rm -v -f && docker-compose -f docker-compose-kbox.yml -p ${INSTANCE_PREFIX} up -d frontend

##### Jobs
php-coding-styles:5.6:
  image: docker.klink.asia:5043/klink/php-ci-docker:5.6
  <<: *need_composer
  stage: php-cs
  script:
    - vendor/bin/php-cs-fixer fix --dry-run
  tags:
    - docker

test-no-solr:5.6:
  variables:
    GITLAB_FAKE_VAR: "Fix docker issues with Gitlab"

  image: docker.klink.asia:5043/klink/php-ci-docker:5.6
  <<: *need_composer
  stage: test
  script:
    - app/console -q
    - vendor/bin/phpunit --configuration app --exclude-group=solr,java,thumbnails
  tags:
    - docker

build-and-package:
  variables:
    SYMFONY_ENV: prod
  image: docker.klink.asia:5043/klink/php-ci-docker:5.6
  stage: release
  script:
    - php -v && composer --version
    - composer install --no-dev --no-interaction --optimize-autoloader
    - echo "$CI_BUILD_REF_NAME -- $CI_BUILD_REF" > web/version
    - mkdir dist
    - tar --xz --create --checkpoint=1500 --transform='s,^.,kcore,' --exclude='./virtualization' --exclude='./.git*' --exclude='./tests' --exclude='./app/cache/' --exclude='./solr' --file=dist/klink-core-${CI_BUILD_REF_NAME/\//--}.tar.xz .
  tags:
    - docker
  artifacts:
    expire_in: 1 day
    paths:
      - dist/

release-copy:
  stage: release-upload
  script:
    - cp dist/klink-core-${CI_BUILD_REF_NAME/\//--}.tar.xz /var/www/temp/builds/
  tags:
    - shell
  artifacts:
    expire_in: 1 day
    paths:
      - dist/

# creates the KCore docker image and restart the test instance with the new image
deploy-to-test:
  environment: Review
  <<: *standard_build_and_execution
  except:
    - master
  variables:
    INSTANCE_PREFIX: $TEST_INSTANCE_PREFIX
    BUILD_LOCATION: $BUILD_FOLDER
    DOCKER_LOCATION: $TEST_DOCKER_FOLDER


# creates the KCore docker image and restart the DMS.klink.asia instance with the new image
deploy-to-kdms:
  environment: Staging
  <<: *standard_build_and_execution
  variables:
    INSTANCE_PREFIX: $DMS_INSTANCE_PREFIX
    BUILD_LOCATION: $BUILD_FOLDER
    DOCKER_LOCATION: $PROD_DOCKER_FOLDER
  only:
    - master
  tags:
    - shell

# creates the KCore docker image with version tag and push it to the registry
docker-tag-image:
  stage: deploy
  tags:
    - shell
  script:
    - cp ${BUILD_LOCATION}/klink-core-${CI_BUILD_REF_NAME/\//--}.tar.xz ${DOCKER_LOCATION}/kcore/downloads/kcore.tar.xz
    - cd ${DOCKER_LOCATION}
    - docker-compose -f klink-services.yml -p ${INSTANCE_PREFIX} build kcore
    - docker tag -f ${INSTANCE_PREFIX}_kcore docker.klink.asia:5043/klinkdocker_kcore:${CI_BUILD_REF_NAME/v/}
    - docker tag -f ${INSTANCE_PREFIX}_kcore docker.klink.asia:5043/klinkdocker_kcore:latest
    - docker tag -f ${INSTANCE_PREFIX}_kcore klinkdocker_kcore:${CI_BUILD_REF_NAME/v/}
    - docker push docker.klink.asia:5043/klinkdocker_kcore:latest
    - docker push docker.klink.asia:5043/klinkdocker_kcore:${CI_BUILD_REF_NAME/v/}

  variables:
    INSTANCE_PREFIX: $DMS_INSTANCE_PREFIX
    BUILD_LOCATION: $BUILD_FOLDER
    DOCKER_LOCATION: $PROD_DOCKER_FOLDER
  only:
    - tags
