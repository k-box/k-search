swagger: '2.0'
info:
  description: ''
  version: version 3.0
  title: K-Search API
  termsOfService: 'https://klink.asia/terms/'
  contact:
    email: info@oneofftech.xyz
  license:
    name: License still to be defined.
host: localhost
basePath: /api/3.0/
tags:
  - name: Search
    description: Search the K-Search index
  - name: Data
    description: Manage the data of the K-Search index.
schemes:
  - https
paths:
  /search.query:
    post:
      summary: Allows to query the K-Search index and returns search results.
      tags:
        - Application
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: SearchQuery
          required: true
          schema:
            $ref: '#/definitions/search.query (request)'
      responses:
        successful:
          schema:
            $ref: '#/definitions/search.query (response)'
        unsuccessful:
          schema:
            $ref: '#/definitions/Error'
  /data.get:
    post:
      summary: Get detailed information of piece of data in the search index.
      tags:
        - Application
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: DataGet
          required: true
          schema:
            $ref: '#/definitions/data.get (request)'
      responses:
        successful:
          schema:
            $ref: '#/definitions/data (response)'
        unsuccessful:
          schema:
            $ref: '#/definitions/Error'
  /data.add:
    post:
      summary: Add piece of data to the search index.
      tags:
        - Application
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Data
          required: true
          schema:
            $ref: '#/definitions/data.add (request)'
      responses:
        successful:
          schema:
            $ref: '#/definitions/data (response)'
        unsuccessful:
          schema:
            $ref: '#/definitions/Error'
  /data.delete:
    post:
      summary: Delete piece of data from the search index.
      tags:
        - Application
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: DataDelete
          required: true
          schema:
            $ref: '#/definitions/data.delete (request)'
      responses:
        successful:
          schema:
            $ref: '#/definitions/Success'
        unsuccessful:
          schema:
            $ref: '#/definitions/Error'
definitions:
  SearchQuery:
    type: object
    required:
      - search
    properties:
      search:
        type: string
        description: >-
          The main terms to search for. If nothing is specified, an empty result
          set will be returned.
      filters:
        type: string
        description: >-
          Search filters in the Lucene query parser syntax:
          https://lucene.apache.org/core/2_9_4/queryparsersyntax.html
      aggregations:
        type: array
        description: A list containing the aggregations to be computed
        items:
          type: object
          properties:
            name:
              type: string
              description: Name of the field where the aggregation should be computed on
            limit:
              type: integer
              description: Only retrieve a certain amount of the most common aggregations.
            counts_filtered:
              type: boolean
              description: Calculate aggregations count after applying filters or before
      limit:
        type: integer
        description: >-
          Specify the number of results to retrieve. If no value is given the
          default value of 10 is used.
      offset:
        type: integer
        description: >-
          Specify the first result to return from the complete set of retrieved
          documents, the value is 0-based; If no value is given the default
          value of 0 is used.
  Data:
    type: object
    title: Data
    required:
      - uuid
      - url
      - hash
      - type
      - data
      - author
      - copyright
      - source
    properties:
      uuid:
        type: string
        description: Universally unique identifier.
      url:
        type: string
        description: The URI where the source data is stored and retrievable
      hash:
        type: string
        description: 'The SHA-2 hash of the Document contents (SHA-512, thus 128 Chars).'
      type:
        type: sting
        description: The general type of the provided data
        enum:
          - document
          - video
      properties:
        type: object
        required:
          - mime_type
          - language
          - title
          - filename
          - created_at
        properties:
          mime_type:
            type: sting
            description: The Mime type of the provided data
          language:
            type: string
            description: ISO code of the main language (explicitly the abstract and title)
          title:
            type: string
            description: The data set or document title.
          filename:
            type: string
            description: The file name of the data.
          created_at:
            type: string
            format: date-time
            description: >-
              Data's or document's creation date in
              [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt)) format
          updated_at:
            type: string
            format: date-time
            description: >-
              Data's or document's updated date in
              [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt)) format
          size:
            readOnly: true
            type: string
            description: The file size of the data.
          abstract:
            type: string
            description: A short abstract about the data or document.
          thumbnaill:
            type: string
            description: The URI where the a thumbnail of this data is stored.
          tags:
            type: array
            description: User-definet tags associated to the data
            items:
              type: string
          hierarchy:
            type: array
            items:
              type: string
              description: >-
                Search data and browse within the hierarchy. However be careful
                to expose the hierarchy to a public search index, as it may
                contain confidential data.
              example:
                - prj01/forestry/
                - prj04/forestry/foobar/
      author:
        type: array
        items:
          type: object
          description: >-
            List of authors, which are objects with name and information on how
            to contact.
          required:
            - name
          properties:
            name:
              type: string
            email:
              type: string
              description: Contact email of author.
            contact:
              type: string
              description: >-
                General contact information (e.g. URL to website or postal
                address).
      copyright:
        type: object
        required:
          - owner
          - usage
        properties:
          owner:
            type: object
            description: >-
              The copyright owner and information on how to contact for any
              inquiries.
            required:
              - name
            properties:
              name:
                type: string
              email:
                type: string
                description: Contact email of copyright owner.
              contact:
                type: string
                description: >-
                  General contact information (e.g. URL to website or postal
                  address).
          usage:
            type: object
            description: The conditions of use of the copyrighted data.
            required:
              - short
              - name
            properties:
              short:
                type: string
                description: >-
                  The associated usage permissions, as SPDX identifier
                  (https://spdx.org/licenses/) and C for full copyright and PD
                  for public domain
              name:
                type: string
                description: >-
                  The associated usage permissions to the piece of data. "All
                  right reserved", "GNU General Public License", ..., "Public
                  Domain"
              reference:
                type: string
                description: URL of the full license text (if applicable).
      source:
        type: object
        description: The originating source where the data has been uploaded or created.
        required:
          - name
        properties:
          name:
            type: string
            description: Freely definable source (could be an organization or project).
          url:
            type: string
            description: >-
              URL to an human readable website with information about the source
              entity.
          app_url:
            readOnly: true
            type: string
            description: The URL of the application that triggered the data upload.
          email:
            type: string
            readOnly: true
            description: >-
              Contact email to of an administrator, who can be contacted in case
              of any issues related to uploaded documents. This data is cominig
              from the Application data in the K-Link Registry
          upload_reference:
            type: string
            description: >-
              Information which lets the source contact track back internally
              the origin of the data. It is suggested to save this information
              on the client side together with the `id` of the API request. In
              easier setups it could also just be the encoded or encripted "user
              id" value on the client side. We recommend not to expose personal
              data here.
  DataVideo:
    type: object
    properties:
      properties:
        type: object
        required:
          - video
          - audio
          - subtitles
        properties:
          video:
            type: object
            properties:
              resolution:
                type: string
              bitrate:
                type: string
              format:
                type: string
              duration:
                type: integer
                description: Length of the video (in seconds)
          audio:
            type: array
            items:
              type: object
              properties:
                language:
                  type: string
                  description: 'Main language(s) spoken in the video, free text'
                bitrate:
                  type: string
                format:
                  type: string
          subtitles:
            type: array
            items:
              type: object
              properties:
                language:
                  type: string
                file:
                  type: string
                format:
                  type: string
  Error:
    type: object
    required:
      - id
      - error
    example:
      id: string
      error:
        code: -32700
        message: Parse error.
    properties:
      id:
        type: string
      error:
        type: object
        properties:
          code:
            type: integer
            minmum: -32768
            maximum: -30000
            description: JSON-RPC inspired error codes.
          message:
            type: string
            description: Human readable error message.
          data:
            type: object
            description: >-
              Additional information can optionally be provided on errors for
              better debugging.
  Success:
    type: object
    required:
      - id
      - result
    example:
      id: string
      result:
        code: 1
        message: Operation completed.
    properties:
      id:
        type: string
      result:
        type: object
        properties:
          code:
            type: integer
            description: JSON-RPC inspired response codes.
          message:
            type: string
            description: Human readable message.
  search.query (request):
    type: object
    required:
      - id
      - params
    properties:
      id:
        type: string
        description: The provided application secret used for authentification.
      params:
        $ref: '#/definitions/SearchQuery'
  data.add (request):
    type: object
    required:
      - id
      - params
    properties:
      id:
        type: string
        description: The provided application secret used for authentification.
      params:
        description: The metadata object of the data piece to be added.
        allOf:
          - $ref: '#/definitions/Data'
          - $ref: '#/definitions/DataVideo'
  data.get (request):
    type: object
    required:
      - id
      - params
    properties:
      id:
        type: string
        description: The provided application secret used for authentification.
      params:
        type: object
        properties:
          uuid:
            type: string
            description: >-
              The universally unique identifier of the data piece to be
              obtained.
  data.delete (request):
    type: object
    required:
      - id
      - params
    properties:
      id:
        type: string
        description: The provided application secret used for authentification.
      params:
        type: object
        properties:
          uuid:
            type: string
            description: The universally unique identifier of the data piece to be deleted.
  search.query (response):
    type: object
    required:
      - status
      - message
      - result
    properties:
      id:
        type: string
      result:
        type: object
        required:
          - query_time
          - total_matches
          - query
          - items
        properties:
          query_time:
            type: integer
            format: float
            description: The time needed to run the search query
          total_matches:
            type: integer
            description: The total amount of found items.
          query:
            $ref: '#/definitions/SearchQuery'
            description: The full SearchQuery object from the request.
          items:
            type: array
            collectionFormat: csv
            items:
              type: object
              $ref: '#/definitions/Data'
          aggregations:
            type: array
            items:
              type: object
              required:
                - title
                - count
              properties:
                name:
                  type: string
                  description: of the field where the aggregation has been computed.
                count:
                  type: integer
                  description: Count of the results according to aggregation
  data (response):
    type: object
    required:
      - id
      - result
    properties:
      id:
        type: string
      result:
        description: The metadata object of the obtained data piece.
        allOf:
          - $ref: '#/definitions/Data'
          - $ref: '#/definitions/DataVideo'
